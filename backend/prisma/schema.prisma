generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  admin_id        Int       @id @default(autoincrement())
  first_name      String
  last_name       String
  contact_no      String?
  email           String
  username        String
  password        String
  user_type       String?
  isActive        Boolean?
  address         String?
  profile_img_url String?
  bookings        Booking[]
}

model Customer {
  customer_id       Int            @id @default(autoincrement())
  first_name        String
  last_name         String
  address           String?
  contact_no        String?
  email             String
  username          String
  password          String
  fb_link           String?
  date_created      DateTime?      @db.Timestamptz(6)
  status            String?
  driver_license_no String?
  isRecUpdate       Int?           @db.SmallInt
  profile_img_url   String?
  phone_verified    Boolean?       @default(false)
  bookings          Booking[]
  driver_license    DriverLicense? @relation("CustomerDriverLicense", fields: [driver_license_no], references: [driver_license_no])
  payments          Payment[]
  refunds           Refund[]
  transactions      Transaction[]
  Waitlist          Waitlist[]
}

model DriverLicense {
  driver_license_no String     @id
  expiry_date       DateTime?  @db.Timestamptz(6)
  restrictions      String?
  dl_img_url        String?
  customers         Customer[] @relation("CustomerDriverLicense")
  drivers           Driver[]
}

model Driver {
  drivers_id        Int           @id @default(autoincrement())
  first_name        String
  last_name         String
  address           String?
  contact_no        String?
  email             String
  username          String
  password          String
  driver_license_no String
  status            String?
  profile_img_url   String?
  phone_verified    Boolean?      @default(false)
  bookings          Booking[]
  driver_license    DriverLicense @relation(fields: [driver_license_no], references: [driver_license_no])
  releases          Release[]
  Waitlist          Waitlist[]
}

model Car {
  car_id        Int           @id @default(autoincrement())
  car_img_url   String?
  car_status    String?
  license_plate String?
  make          String?
  mileage       Int?
  model         String?
  no_of_seat    Int
  rent_price    Int
  year          Int?
  car_type      String?
  bookings      Booking[]
  maintenances  Maintenance[]
  transactions  Transaction[]
  Waitlist      Waitlist[]
}

model Booking {
  booking_id     Int           @id @default(autoincrement())
  customer_id    Int
  car_id         Int
  booking_date   DateTime      @db.Timestamptz(6)
  purpose        String?
  start_date     DateTime      @db.Timestamptz(6)
  end_date       DateTime      @db.Timestamptz(6)
  pickup_time    DateTime?     @db.Timestamptz(6)
  pickup_loc     String?
  dropoff_time   DateTime?     @db.Timestamptz(6)
  dropoff_loc    String?
  isSelfDriver   Boolean?      @default(false)
  isExtend       Boolean?      @default(false)
  new_end_date   DateTime?     @db.Timestamptz(6)
  isCancel       Boolean?      @default(false)
  total_amount   Int?
  payment_status String?
  isRelease      Boolean?      @default(false)
  isReturned     Boolean?      @default(false)
  booking_status String?
  drivers_id     Int?
  admin_id       Int?
  isDeliver      Boolean?      @default(false)
  deliver_loc    String?
  balance        Int?          @default(0)
  isPay          Boolean?      @default(false)
  admin          Admin?        @relation(fields: [admin_id], references: [admin_id])
  car            Car           @relation(fields: [car_id], references: [car_id])
  customer       Customer      @relation(fields: [customer_id], references: [customer_id])
  driver         Driver?       @relation(fields: [drivers_id], references: [drivers_id])
  extensions     Extension[]
  payments       Payment[]
  refunds        Refund[]
  releases       Release[]
  Return         Return[]
  transactions   Transaction[]
}

model Extension {
  extension_id Int       @id @default(autoincrement())
  booking_id   Int
  old_end_date DateTime  @db.Timestamptz(6)
  new_end_date DateTime? @db.Timestamptz(6)
  booking      Booking   @relation(fields: [booking_id], references: [booking_id])
}

model Payment {
  payment_id           Int       @id @default(autoincrement())
  booking_id           Int?
  customer_id          Int
  description          String?
  payment_method       String?
  gcash_no             String?
  reference_no         String?
  amount               Int
  paid_date            DateTime? @db.Timestamptz(6)
  balance              Int?
  waitlist_id          Int?
  payment_proof_url    String?
  verification_status  String?   @default("pending")
  verified_by_admin_id Int?
  verification_date    DateTime? @db.Timestamptz(6)
  verification_notes   String?
  booking              Booking?  @relation(fields: [booking_id], references: [booking_id], onDelete: Restrict)
  customer             Customer  @relation(fields: [customer_id], references: [customer_id])
  Waitlist             Waitlist? @relation(fields: [waitlist_id], references: [waitlist_id])

  @@index([verification_status], map: "idx_payment_verification_status")
}

model Refund {
  refund_id     Int       @id @default(autoincrement())
  booking_id    Int
  customer_id   Int
  refund_method String?
  gcash_no      String?
  reference_no  String?
  refund_amount Int
  refund_date   DateTime? @db.Timestamptz(6)
  description   String?
  booking       Booking   @relation(fields: [booking_id], references: [booking_id])
  customer      Customer  @relation(fields: [customer_id], references: [customer_id])
}

model Transaction {
  transaction_id    Int       @id @default(autoincrement())
  booking_id        Int
  customer_id       Int
  car_id            Int
  completion_date   DateTime? @db.Timestamptz(6)
  cancellation_date DateTime? @db.Timestamptz(6)
  booking           Booking   @relation(fields: [booking_id], references: [booking_id])
  car               Car       @relation(fields: [car_id], references: [car_id])
  customer          Customer  @relation(fields: [customer_id], references: [customer_id])
}

model Maintenance {
  maintenance_id         Int       @id @default(autoincrement())
  car_id                 Int
  maintenance_start_date DateTime? @db.Timestamptz(6)
  maintenance_end_date   DateTime? @db.Timestamptz(6)
  description            String?
  maintenance_cost       Int?
  maintenance_shop_name  String?
  car                    Car       @relation(fields: [car_id], references: [car_id])
}

model Release {
  release_id        Int      @id @default(autoincrement())
  booking_id        Int
  drivers_id        Int
  valid_id_img1     String?
  valid_id_img2     String?
  equipment         String?
  equip_others      String?
  gas_level         String?
  license_presented Boolean? @default(false)
  front_img         String?
  back_img          String?
  right_img         String?
  left_img          String?
  booking           Booking  @relation(fields: [booking_id], references: [booking_id])
  driver            Driver   @relation(fields: [drivers_id], references: [drivers_id])
}

model PasswordResetToken {
  id         Int      @id @default(autoincrement())
  user_id    Int
  user_type  String
  email      String
  token      String   @unique
  code       String
  expires_at DateTime @db.Timestamptz(6)
  used       Boolean  @default(false)
  created_at DateTime @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)
}

model VerificationCode {
  id           Int      @id @default(autoincrement())
  user_id      Int
  user_type    String
  identifier   String
  code         String
  type         String
  purpose      String
  attempts     Int      @default(0)
  max_attempts Int      @default(3)
  expires_at   DateTime @db.Timestamptz(6)
  verified     Boolean  @default(false)
  created_at   DateTime @db.Timestamptz(6)
  updated_at   DateTime @updatedAt @db.Timestamptz(6)
}

model Return {
  return_id      BigInt   @id @unique @default(autoincrement())
  booking_id     Int?
  damage_check   String?
  damage_img     String?  @db.VarChar
  equipment      String?
  gas_level      String?
  odometer       BigInt?
  total_fee      Int?
  equip_others   String?
  isClean        Boolean? @default(true)
  hasStain       Boolean? @default(false)
  fees_breakdown String?
  Booking        Booking? @relation(fields: [booking_id], references: [booking_id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ManageFees {
  fee_id   BigInt @id @default(autoincrement())
  fee_type String
  amount   Int?
}

model Waitlist {
  waitlist_id          Int       @id @default(autoincrement())
  customer_id          Int
  car_id               Int
  requested_start_date DateTime  @db.Timestamptz(6)
  requested_end_date   DateTime  @db.Timestamptz(6)
  purpose              String?
  pickup_time          String?
  dropoff_time         String?
  pickup_location      String?
  dropoff_location     String?
  delivery_type        String?
  is_self_drive        Boolean?  @default(true)
  selected_driver_id   Int?
  special_requests     String?
  total_cost           Int?
  status               String?   @default("waiting")
  position             Int
  date_created         DateTime  @db.Timestamptz(6)
  notified_date        DateTime? @db.Timestamptz(6)
  payment_status       String?   @default("unpaid")
  paid_date            DateTime? @db.Timestamptz(6)
  Payment              Payment[]
  Car                  Car       @relation(fields: [car_id], references: [car_id], onDelete: Cascade)
  Customer             Customer  @relation(fields: [customer_id], references: [customer_id], onDelete: Cascade)
  Driver               Driver?   @relation(fields: [selected_driver_id], references: [drivers_id])

  @@index([car_id, status, position])
  @@index([customer_id])
  @@index([payment_status])
}

model PhoneVerification {
  id           Int       @id @default(autoincrement())
  phone_number String
  otp_code     String
  is_verified  Boolean   @default(false)
  created_at   DateTime  @db.Timestamptz(6)
  expires_at   DateTime  @db.Timestamptz(6)
  verified_at  DateTime? @db.Timestamptz(6)
  attempts     Int       @default(0)
  purpose      String?   @default("registration")
  user_id      Int?
  user_type    String?

  @@index([expires_at])
  @@index([phone_number, is_verified])
}

enum damage_level {
  No_Damage
  Minor
  Major
}
